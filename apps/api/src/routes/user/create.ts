/**
 * Example endpoint showing how to use ResponseFactory.createCRUDResponses
 * This demonstrates the proper usage of the response factory in a real endpoint
 */

import { z } from '@hono/zod-openapi';
import { LifecycleStatusEnum, RoleEnum, UserSchema, VisibilityEnum } from '@repo/schemas';
import { UserService } from '@repo/service-core';
import { apiLogger } from '../../utils/logger';
import { createCRUDRoute } from '../../utils/route-factory';

const userService = new UserService({ logger: apiLogger });

/**
 * Example: Create user endpoint using ResponseFactory
 */
export const createUserRoute = createCRUDRoute({
    method: 'post',
    path: '/',
    summary: 'Create user',
    description: 'Creates a new user',
    tags: ['Users'],
    requestBody: z.object({
        firstName: z.string().min(2),
        lastName: z.string().min(2),
        displayName: z.string().min(2).optional(),
        role: z.nativeEnum(RoleEnum).default(RoleEnum.USER)
    }),
    responseSchema: UserSchema,
    handler: async (ctx, _params, body) => {
        const userData = body as {
            firstName: string;
            lastName: string;
            displayName?: string;
            role: RoleEnum;
        };

        // Get actor from context (assuming it's set by auth middleware)
        const actor = ctx.get('actor');

        // Call the real user service
        const result = await userService.create(actor, {
            firstName: userData.firstName,
            lastName: userData.lastName,
            displayName: userData.displayName,
            role: userData.role,
            permissions: [],
            slug: '', // Will be auto-generated by the service
            lifecycleState: LifecycleStatusEnum.ACTIVE,
            visibility: VisibilityEnum.PUBLIC
        });

        if (result.error) {
            throw new Error(result.error.message);
        }

        return result.data;
    }
});
