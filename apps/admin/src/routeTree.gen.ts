/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SponsorsRouteImport } from './routes/sponsors'
import { Route as NotificationsRouteImport } from './routes/notifications'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PostsIndexRouteImport } from './routes/posts/index'
import { Route as EventsIndexRouteImport } from './routes/events/index'
import { Route as DestinationsIndexRouteImport } from './routes/destinations/index'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as AccommodationsIndexRouteImport } from './routes/accommodations/index'
import { Route as SettingsTagsRouteImport } from './routes/settings/tags'
import { Route as SettingsSeoRouteImport } from './routes/settings/seo'
import { Route as SettingsCriticalRouteImport } from './routes/settings/critical'
import { Route as PostsNewRouteImport } from './routes/posts/new'
import { Route as MeSettingsRouteImport } from './routes/me/settings'
import { Route as MeProfileRouteImport } from './routes/me/profile'
import { Route as EventsOrganizersRouteImport } from './routes/events/organizers'
import { Route as EventsNewRouteImport } from './routes/events/new'
import { Route as EventsLocationsRouteImport } from './routes/events/locations'
import { Route as DestinationsNewRouteImport } from './routes/destinations/new'
import { Route as ContentDestinationAttractionsRouteImport } from './routes/content/destination-attractions'
import { Route as ContentAccommodationFeaturesRouteImport } from './routes/content/accommodation-features'
import { Route as ContentAccommodationAmenitiesRouteImport } from './routes/content/accommodation-amenities'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthSigninRouteImport } from './routes/auth/signin'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'
import { Route as AnalyticsUsageRouteImport } from './routes/analytics/usage'
import { Route as AnalyticsDebugRouteImport } from './routes/analytics/debug'
import { Route as AnalyticsBusinessRouteImport } from './routes/analytics/business'
import { Route as AccommodationsNewRouteImport } from './routes/accommodations/new'
import { Route as AccessPermissionsRouteImport } from './routes/access/permissions'
import { Route as MeAccommodationsIndexRouteImport } from './routes/me/accommodations/index'
import { Route as AccessUsersIndexRouteImport } from './routes/access/users/index'
import { Route as AccessUsersNewRouteImport } from './routes/access/users/new'

const SponsorsRoute = SponsorsRouteImport.update({
  id: '/sponsors',
  path: '/sponsors',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIndexRoute = EventsIndexRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRouteImport,
} as any)
const DestinationsIndexRoute = DestinationsIndexRouteImport.update({
  id: '/destinations/',
  path: '/destinations/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any)
const AccommodationsIndexRoute = AccommodationsIndexRouteImport.update({
  id: '/accommodations/',
  path: '/accommodations/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsTagsRoute = SettingsTagsRouteImport.update({
  id: '/settings/tags',
  path: '/settings/tags',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsSeoRoute = SettingsSeoRouteImport.update({
  id: '/settings/seo',
  path: '/settings/seo',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsCriticalRoute = SettingsCriticalRouteImport.update({
  id: '/settings/critical',
  path: '/settings/critical',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsNewRoute = PostsNewRouteImport.update({
  id: '/posts/new',
  path: '/posts/new',
  getParentRoute: () => rootRouteImport,
} as any)
const MeSettingsRoute = MeSettingsRouteImport.update({
  id: '/me/settings',
  path: '/me/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const MeProfileRoute = MeProfileRouteImport.update({
  id: '/me/profile',
  path: '/me/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsOrganizersRoute = EventsOrganizersRouteImport.update({
  id: '/events/organizers',
  path: '/events/organizers',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsNewRoute = EventsNewRouteImport.update({
  id: '/events/new',
  path: '/events/new',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsLocationsRoute = EventsLocationsRouteImport.update({
  id: '/events/locations',
  path: '/events/locations',
  getParentRoute: () => rootRouteImport,
} as any)
const DestinationsNewRoute = DestinationsNewRouteImport.update({
  id: '/destinations/new',
  path: '/destinations/new',
  getParentRoute: () => rootRouteImport,
} as any)
const ContentDestinationAttractionsRoute =
  ContentDestinationAttractionsRouteImport.update({
    id: '/content/destination-attractions',
    path: '/content/destination-attractions',
    getParentRoute: () => rootRouteImport,
  } as any)
const ContentAccommodationFeaturesRoute =
  ContentAccommodationFeaturesRouteImport.update({
    id: '/content/accommodation-features',
    path: '/content/accommodation-features',
    getParentRoute: () => rootRouteImport,
  } as any)
const ContentAccommodationAmenitiesRoute =
  ContentAccommodationAmenitiesRouteImport.update({
    id: '/content/accommodation-amenities',
    path: '/content/accommodation-amenities',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyticsUsageRoute = AnalyticsUsageRouteImport.update({
  id: '/analytics/usage',
  path: '/analytics/usage',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyticsDebugRoute = AnalyticsDebugRouteImport.update({
  id: '/analytics/debug',
  path: '/analytics/debug',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyticsBusinessRoute = AnalyticsBusinessRouteImport.update({
  id: '/analytics/business',
  path: '/analytics/business',
  getParentRoute: () => rootRouteImport,
} as any)
const AccommodationsNewRoute = AccommodationsNewRouteImport.update({
  id: '/accommodations/new',
  path: '/accommodations/new',
  getParentRoute: () => rootRouteImport,
} as any)
const AccessPermissionsRoute = AccessPermissionsRouteImport.update({
  id: '/access/permissions',
  path: '/access/permissions',
  getParentRoute: () => rootRouteImport,
} as any)
const MeAccommodationsIndexRoute = MeAccommodationsIndexRouteImport.update({
  id: '/me/accommodations/',
  path: '/me/accommodations/',
  getParentRoute: () => rootRouteImport,
} as any)
const AccessUsersIndexRoute = AccessUsersIndexRouteImport.update({
  id: '/access/users/',
  path: '/access/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const AccessUsersNewRoute = AccessUsersNewRouteImport.update({
  id: '/access/users/new',
  path: '/access/users/new',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/notifications': typeof NotificationsRoute
  '/sponsors': typeof SponsorsRoute
  '/access/permissions': typeof AccessPermissionsRoute
  '/accommodations/new': typeof AccommodationsNewRoute
  '/analytics/business': typeof AnalyticsBusinessRoute
  '/analytics/debug': typeof AnalyticsDebugRoute
  '/analytics/usage': typeof AnalyticsUsageRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/content/accommodation-amenities': typeof ContentAccommodationAmenitiesRoute
  '/content/accommodation-features': typeof ContentAccommodationFeaturesRoute
  '/content/destination-attractions': typeof ContentDestinationAttractionsRoute
  '/destinations/new': typeof DestinationsNewRoute
  '/events/locations': typeof EventsLocationsRoute
  '/events/new': typeof EventsNewRoute
  '/events/organizers': typeof EventsOrganizersRoute
  '/me/profile': typeof MeProfileRoute
  '/me/settings': typeof MeSettingsRoute
  '/posts/new': typeof PostsNewRoute
  '/settings/critical': typeof SettingsCriticalRoute
  '/settings/seo': typeof SettingsSeoRoute
  '/settings/tags': typeof SettingsTagsRoute
  '/accommodations': typeof AccommodationsIndexRoute
  '/auth': typeof AuthIndexRoute
  '/destinations': typeof DestinationsIndexRoute
  '/events': typeof EventsIndexRoute
  '/posts': typeof PostsIndexRoute
  '/access/users/new': typeof AccessUsersNewRoute
  '/access/users': typeof AccessUsersIndexRoute
  '/me/accommodations': typeof MeAccommodationsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/notifications': typeof NotificationsRoute
  '/sponsors': typeof SponsorsRoute
  '/access/permissions': typeof AccessPermissionsRoute
  '/accommodations/new': typeof AccommodationsNewRoute
  '/analytics/business': typeof AnalyticsBusinessRoute
  '/analytics/debug': typeof AnalyticsDebugRoute
  '/analytics/usage': typeof AnalyticsUsageRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/content/accommodation-amenities': typeof ContentAccommodationAmenitiesRoute
  '/content/accommodation-features': typeof ContentAccommodationFeaturesRoute
  '/content/destination-attractions': typeof ContentDestinationAttractionsRoute
  '/destinations/new': typeof DestinationsNewRoute
  '/events/locations': typeof EventsLocationsRoute
  '/events/new': typeof EventsNewRoute
  '/events/organizers': typeof EventsOrganizersRoute
  '/me/profile': typeof MeProfileRoute
  '/me/settings': typeof MeSettingsRoute
  '/posts/new': typeof PostsNewRoute
  '/settings/critical': typeof SettingsCriticalRoute
  '/settings/seo': typeof SettingsSeoRoute
  '/settings/tags': typeof SettingsTagsRoute
  '/accommodations': typeof AccommodationsIndexRoute
  '/auth': typeof AuthIndexRoute
  '/destinations': typeof DestinationsIndexRoute
  '/events': typeof EventsIndexRoute
  '/posts': typeof PostsIndexRoute
  '/access/users/new': typeof AccessUsersNewRoute
  '/access/users': typeof AccessUsersIndexRoute
  '/me/accommodations': typeof MeAccommodationsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/notifications': typeof NotificationsRoute
  '/sponsors': typeof SponsorsRoute
  '/access/permissions': typeof AccessPermissionsRoute
  '/accommodations/new': typeof AccommodationsNewRoute
  '/analytics/business': typeof AnalyticsBusinessRoute
  '/analytics/debug': typeof AnalyticsDebugRoute
  '/analytics/usage': typeof AnalyticsUsageRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/content/accommodation-amenities': typeof ContentAccommodationAmenitiesRoute
  '/content/accommodation-features': typeof ContentAccommodationFeaturesRoute
  '/content/destination-attractions': typeof ContentDestinationAttractionsRoute
  '/destinations/new': typeof DestinationsNewRoute
  '/events/locations': typeof EventsLocationsRoute
  '/events/new': typeof EventsNewRoute
  '/events/organizers': typeof EventsOrganizersRoute
  '/me/profile': typeof MeProfileRoute
  '/me/settings': typeof MeSettingsRoute
  '/posts/new': typeof PostsNewRoute
  '/settings/critical': typeof SettingsCriticalRoute
  '/settings/seo': typeof SettingsSeoRoute
  '/settings/tags': typeof SettingsTagsRoute
  '/accommodations/': typeof AccommodationsIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/destinations/': typeof DestinationsIndexRoute
  '/events/': typeof EventsIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/access/users/new': typeof AccessUsersNewRoute
  '/access/users/': typeof AccessUsersIndexRoute
  '/me/accommodations/': typeof MeAccommodationsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/notifications'
    | '/sponsors'
    | '/access/permissions'
    | '/accommodations/new'
    | '/analytics/business'
    | '/analytics/debug'
    | '/analytics/usage'
    | '/auth/callback'
    | '/auth/signin'
    | '/auth/signup'
    | '/content/accommodation-amenities'
    | '/content/accommodation-features'
    | '/content/destination-attractions'
    | '/destinations/new'
    | '/events/locations'
    | '/events/new'
    | '/events/organizers'
    | '/me/profile'
    | '/me/settings'
    | '/posts/new'
    | '/settings/critical'
    | '/settings/seo'
    | '/settings/tags'
    | '/accommodations'
    | '/auth'
    | '/destinations'
    | '/events'
    | '/posts'
    | '/access/users/new'
    | '/access/users'
    | '/me/accommodations'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/notifications'
    | '/sponsors'
    | '/access/permissions'
    | '/accommodations/new'
    | '/analytics/business'
    | '/analytics/debug'
    | '/analytics/usage'
    | '/auth/callback'
    | '/auth/signin'
    | '/auth/signup'
    | '/content/accommodation-amenities'
    | '/content/accommodation-features'
    | '/content/destination-attractions'
    | '/destinations/new'
    | '/events/locations'
    | '/events/new'
    | '/events/organizers'
    | '/me/profile'
    | '/me/settings'
    | '/posts/new'
    | '/settings/critical'
    | '/settings/seo'
    | '/settings/tags'
    | '/accommodations'
    | '/auth'
    | '/destinations'
    | '/events'
    | '/posts'
    | '/access/users/new'
    | '/access/users'
    | '/me/accommodations'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/notifications'
    | '/sponsors'
    | '/access/permissions'
    | '/accommodations/new'
    | '/analytics/business'
    | '/analytics/debug'
    | '/analytics/usage'
    | '/auth/callback'
    | '/auth/signin'
    | '/auth/signup'
    | '/content/accommodation-amenities'
    | '/content/accommodation-features'
    | '/content/destination-attractions'
    | '/destinations/new'
    | '/events/locations'
    | '/events/new'
    | '/events/organizers'
    | '/me/profile'
    | '/me/settings'
    | '/posts/new'
    | '/settings/critical'
    | '/settings/seo'
    | '/settings/tags'
    | '/accommodations/'
    | '/auth/'
    | '/destinations/'
    | '/events/'
    | '/posts/'
    | '/access/users/new'
    | '/access/users/'
    | '/me/accommodations/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  NotificationsRoute: typeof NotificationsRoute
  SponsorsRoute: typeof SponsorsRoute
  AccessPermissionsRoute: typeof AccessPermissionsRoute
  AccommodationsNewRoute: typeof AccommodationsNewRoute
  AnalyticsBusinessRoute: typeof AnalyticsBusinessRoute
  AnalyticsDebugRoute: typeof AnalyticsDebugRoute
  AnalyticsUsageRoute: typeof AnalyticsUsageRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignupRoute: typeof AuthSignupRoute
  ContentAccommodationAmenitiesRoute: typeof ContentAccommodationAmenitiesRoute
  ContentAccommodationFeaturesRoute: typeof ContentAccommodationFeaturesRoute
  ContentDestinationAttractionsRoute: typeof ContentDestinationAttractionsRoute
  DestinationsNewRoute: typeof DestinationsNewRoute
  EventsLocationsRoute: typeof EventsLocationsRoute
  EventsNewRoute: typeof EventsNewRoute
  EventsOrganizersRoute: typeof EventsOrganizersRoute
  MeProfileRoute: typeof MeProfileRoute
  MeSettingsRoute: typeof MeSettingsRoute
  PostsNewRoute: typeof PostsNewRoute
  SettingsCriticalRoute: typeof SettingsCriticalRoute
  SettingsSeoRoute: typeof SettingsSeoRoute
  SettingsTagsRoute: typeof SettingsTagsRoute
  AccommodationsIndexRoute: typeof AccommodationsIndexRoute
  AuthIndexRoute: typeof AuthIndexRoute
  DestinationsIndexRoute: typeof DestinationsIndexRoute
  EventsIndexRoute: typeof EventsIndexRoute
  PostsIndexRoute: typeof PostsIndexRoute
  AccessUsersNewRoute: typeof AccessUsersNewRoute
  AccessUsersIndexRoute: typeof AccessUsersIndexRoute
  MeAccommodationsIndexRoute: typeof MeAccommodationsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sponsors': {
      id: '/sponsors'
      path: '/sponsors'
      fullPath: '/sponsors'
      preLoaderRoute: typeof SponsorsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/destinations/': {
      id: '/destinations/'
      path: '/destinations'
      fullPath: '/destinations'
      preLoaderRoute: typeof DestinationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accommodations/': {
      id: '/accommodations/'
      path: '/accommodations'
      fullPath: '/accommodations'
      preLoaderRoute: typeof AccommodationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/tags': {
      id: '/settings/tags'
      path: '/settings/tags'
      fullPath: '/settings/tags'
      preLoaderRoute: typeof SettingsTagsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/seo': {
      id: '/settings/seo'
      path: '/settings/seo'
      fullPath: '/settings/seo'
      preLoaderRoute: typeof SettingsSeoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/critical': {
      id: '/settings/critical'
      path: '/settings/critical'
      fullPath: '/settings/critical'
      preLoaderRoute: typeof SettingsCriticalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/new': {
      id: '/posts/new'
      path: '/posts/new'
      fullPath: '/posts/new'
      preLoaderRoute: typeof PostsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/me/settings': {
      id: '/me/settings'
      path: '/me/settings'
      fullPath: '/me/settings'
      preLoaderRoute: typeof MeSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/me/profile': {
      id: '/me/profile'
      path: '/me/profile'
      fullPath: '/me/profile'
      preLoaderRoute: typeof MeProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/organizers': {
      id: '/events/organizers'
      path: '/events/organizers'
      fullPath: '/events/organizers'
      preLoaderRoute: typeof EventsOrganizersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/new': {
      id: '/events/new'
      path: '/events/new'
      fullPath: '/events/new'
      preLoaderRoute: typeof EventsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/locations': {
      id: '/events/locations'
      path: '/events/locations'
      fullPath: '/events/locations'
      preLoaderRoute: typeof EventsLocationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/destinations/new': {
      id: '/destinations/new'
      path: '/destinations/new'
      fullPath: '/destinations/new'
      preLoaderRoute: typeof DestinationsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/content/destination-attractions': {
      id: '/content/destination-attractions'
      path: '/content/destination-attractions'
      fullPath: '/content/destination-attractions'
      preLoaderRoute: typeof ContentDestinationAttractionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/content/accommodation-features': {
      id: '/content/accommodation-features'
      path: '/content/accommodation-features'
      fullPath: '/content/accommodation-features'
      preLoaderRoute: typeof ContentAccommodationFeaturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/content/accommodation-amenities': {
      id: '/content/accommodation-amenities'
      path: '/content/accommodation-amenities'
      fullPath: '/content/accommodation-amenities'
      preLoaderRoute: typeof ContentAccommodationAmenitiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics/usage': {
      id: '/analytics/usage'
      path: '/analytics/usage'
      fullPath: '/analytics/usage'
      preLoaderRoute: typeof AnalyticsUsageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics/debug': {
      id: '/analytics/debug'
      path: '/analytics/debug'
      fullPath: '/analytics/debug'
      preLoaderRoute: typeof AnalyticsDebugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics/business': {
      id: '/analytics/business'
      path: '/analytics/business'
      fullPath: '/analytics/business'
      preLoaderRoute: typeof AnalyticsBusinessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accommodations/new': {
      id: '/accommodations/new'
      path: '/accommodations/new'
      fullPath: '/accommodations/new'
      preLoaderRoute: typeof AccommodationsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/access/permissions': {
      id: '/access/permissions'
      path: '/access/permissions'
      fullPath: '/access/permissions'
      preLoaderRoute: typeof AccessPermissionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/me/accommodations/': {
      id: '/me/accommodations/'
      path: '/me/accommodations'
      fullPath: '/me/accommodations'
      preLoaderRoute: typeof MeAccommodationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/access/users/': {
      id: '/access/users/'
      path: '/access/users'
      fullPath: '/access/users'
      preLoaderRoute: typeof AccessUsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/access/users/new': {
      id: '/access/users/new'
      path: '/access/users/new'
      fullPath: '/access/users/new'
      preLoaderRoute: typeof AccessUsersNewRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  NotificationsRoute: NotificationsRoute,
  SponsorsRoute: SponsorsRoute,
  AccessPermissionsRoute: AccessPermissionsRoute,
  AccommodationsNewRoute: AccommodationsNewRoute,
  AnalyticsBusinessRoute: AnalyticsBusinessRoute,
  AnalyticsDebugRoute: AnalyticsDebugRoute,
  AnalyticsUsageRoute: AnalyticsUsageRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthSignupRoute: AuthSignupRoute,
  ContentAccommodationAmenitiesRoute: ContentAccommodationAmenitiesRoute,
  ContentAccommodationFeaturesRoute: ContentAccommodationFeaturesRoute,
  ContentDestinationAttractionsRoute: ContentDestinationAttractionsRoute,
  DestinationsNewRoute: DestinationsNewRoute,
  EventsLocationsRoute: EventsLocationsRoute,
  EventsNewRoute: EventsNewRoute,
  EventsOrganizersRoute: EventsOrganizersRoute,
  MeProfileRoute: MeProfileRoute,
  MeSettingsRoute: MeSettingsRoute,
  PostsNewRoute: PostsNewRoute,
  SettingsCriticalRoute: SettingsCriticalRoute,
  SettingsSeoRoute: SettingsSeoRoute,
  SettingsTagsRoute: SettingsTagsRoute,
  AccommodationsIndexRoute: AccommodationsIndexRoute,
  AuthIndexRoute: AuthIndexRoute,
  DestinationsIndexRoute: DestinationsIndexRoute,
  EventsIndexRoute: EventsIndexRoute,
  PostsIndexRoute: PostsIndexRoute,
  AccessUsersNewRoute: AccessUsersNewRoute,
  AccessUsersIndexRoute: AccessUsersIndexRoute,
  MeAccommodationsIndexRoute: MeAccommodationsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
