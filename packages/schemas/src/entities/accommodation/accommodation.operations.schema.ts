import { z } from 'zod';
import {
    AmenityIdSchema,
    DestinationIdSchema,
    FeatureIdSchema,
    UserIdSchema
} from '../../common/id.schema.js';
import { AccommodationTypeEnumSchema } from '../../enums/index.js';
import { AccommodationSchema } from './accommodation.schema.js';

/**
 * Accommodation Operations Schemas
 *
 * This file contains all CRUD and operational schemas derived from
 * the main AccommodationSchema for different use cases.
 */

/**
 * Schema for creating a new accommodation
 * Omits server-generated fields and calculated values
 */
export const AccommodationCreateSchema = AccommodationSchema.omit({
    id: true,
    slug: true, // Generated by service
    createdAt: true,
    updatedAt: true,
    createdById: true,
    updatedById: true,
    deletedAt: true,
    deletedById: true,
    reviewsCount: true, // Calculated field
    averageRating: true // Calculated field
});

/**
 * Schema for updating an existing accommodation
 * All fields are optional for partial updates
 */
export const AccommodationUpdateSchema = AccommodationCreateSchema.partial();

/**
 * Schema for viewing accommodation details
 * Same as the main schema, used for clarity in API responses
 */
export const AccommodationViewSchema = AccommodationSchema;

/**
 * Schema for accommodation list items
 * Contains only essential fields for list displays
 */
export const AccommodationListItemSchema = AccommodationSchema.pick({
    id: true,
    slug: true,
    name: true,
    summary: true,
    type: true,
    isFeatured: true,
    reviewsCount: true,
    averageRating: true,
    createdAt: true,
    updatedAt: true
}).extend({
    // Add media.featuredImage for list view
    featuredImage: z
        .object({
            url: z.string().url(),
            caption: z.string().optional(),
            description: z.string().optional()
        })
        .optional()
});

/**
 * Schema for accommodation search and filtering
 * Contains search criteria and filter options
 */
export const AccommodationSearchSchema = z.object({
    filters: z
        .object({
            name: z.string().optional(),
            type: AccommodationTypeEnumSchema.optional(),
            destinationId: DestinationIdSchema.optional(),
            ownerId: UserIdSchema.optional(),
            isFeatured: z.boolean().optional(),
            minRating: z.number().min(0).max(5).optional(),
            maxRating: z.number().min(0).max(5).optional(),
            minPrice: z.number().positive().optional(),
            maxPrice: z.number().positive().optional(),
            capacity: z.number().int().min(1).optional(),
            bedrooms: z.number().int().min(1).optional(),
            bathrooms: z.number().int().min(1).optional(),
            // Search by features/amenities (separate queries)
            featureIds: z.array(FeatureIdSchema).optional(),
            amenityIds: z.array(AmenityIdSchema).optional(),
            q: z.string().optional() // free text search
        })
        .optional(),
    pagination: z
        .object({
            page: z.number().int().min(1).default(1),
            pageSize: z.number().int().min(1).max(100).default(20)
        })
        .optional()
});

/**
 * Schema for accommodation summary
 * Lightweight version for cards and previews
 */
export const AccommodationSummarySchema = AccommodationSchema.pick({
    id: true,
    slug: true,
    name: true,
    summary: true,
    type: true,
    isFeatured: true,
    reviewsCount: true,
    averageRating: true
}).extend({
    // Add essential location info
    locationSummary: z
        .object({
            city: z.string().optional(),
            state: z.string().optional(),
            country: z.string().optional()
        })
        .optional(),
    // Add featured image
    featuredImage: z
        .object({
            url: z.string().url(),
            caption: z.string().optional(),
            description: z.string().optional()
        })
        .optional(),
    // Add price summary
    priceSummary: z
        .object({
            amount: z
                .number({ message: 'zodError.accommodation.priceSummary.amount.required' })
                .positive(),
            currency: z.string({ message: 'zodError.accommodation.priceSummary.currency.required' })
        })
        .optional()
});

/**
 * Type exports for all operation schemas
 */
export type AccommodationCreate = z.infer<typeof AccommodationCreateSchema>;
export type AccommodationUpdate = z.infer<typeof AccommodationUpdateSchema>;
export type AccommodationView = z.infer<typeof AccommodationViewSchema>;
export type AccommodationListItem = z.infer<typeof AccommodationListItemSchema>;
export type AccommodationSearch = z.infer<typeof AccommodationSearchSchema>;
export type AccommodationSummary = z.infer<typeof AccommodationSummarySchema>;
