import fs from 'node:fs';
import path from 'node:path';
import { STATUS_ICONS } from './icons.js';
import { logger } from './logger.js';

/**
 * Utility class for mapping seed IDs to real database IDs.
 * This is essential for handling relationships between entities during seeding.
 */
export class IdMapper {
    private mappings = new Map<string, Map<string, string>>();
    private readonly mappingsFilePath: string;

    constructor() {
        // Create mappings directory if it doesn't exist
        const mappingsDir = path.resolve(process.cwd(), 'mappings');
        if (!fs.existsSync(mappingsDir)) {
            fs.mkdirSync(mappingsDir, { recursive: true });
        }
        this.mappingsFilePath = path.join(mappingsDir, 'id-mappings.json');

        // Load existing mappings on initialization
        this.loadMappings();
    }

    /**
     * Loads mappings from the JSON file
     */
    private loadMappings(): void {
        try {
            if (fs.existsSync(this.mappingsFilePath)) {
                const data = fs.readFileSync(this.mappingsFilePath, 'utf8');
                const mappingsData = JSON.parse(data) as Record<string, Record<string, string>>;

                for (const [entityType, mappings] of Object.entries(mappingsData)) {
                    const entityMap = new Map<string, string>();
                    for (const [seedId, realId] of Object.entries(mappings)) {
                        entityMap.set(seedId, realId);
                    }
                    this.mappings.set(entityType, entityMap);
                }

                logger.info(
                    `${STATUS_ICONS.Info} Loaded ${this.getTotalMappingsCount()} existing ID mappings`
                );
            }
        } catch (error) {
            logger.warn(
                `${STATUS_ICONS.Warning} Could not load existing mappings: ${(error as Error).message}`
            );
        }
    }

    /**
     * Saves mappings to the JSON file
     */
    private saveMappings(): void {
        try {
            const mappingsData: Record<string, Record<string, string>> = {};

            for (const [entityType, mappings] of this.mappings.entries()) {
                mappingsData[entityType] = {};
                for (const [seedId, realId] of mappings.entries()) {
                    mappingsData[entityType][seedId] = realId;
                }
            }

            fs.writeFileSync(this.mappingsFilePath, JSON.stringify(mappingsData, null, 2));
        } catch (error) {
            logger.error(
                `${STATUS_ICONS.Error} Could not save mappings: ${(error as Error).message}`
            );
        }
    }

    /**
     * Gets the total count of all mappings
     */
    private getTotalMappingsCount(): number {
        let total = 0;
        for (const mappings of this.mappings.values()) {
            total += mappings.size;
        }
        return total;
    }

    /**
     * Sets a mapping from seed ID to real ID for a specific entity type.
     * @param entityType - The type of entity (e.g., 'attractions', 'destinations', 'tags')
     * @param seedId - The ID from the seed JSON file
     * @param realId - The real UUID generated by the database
     */
    setMapping(entityType: string, seedId: string, realId: string): void {
        if (!this.mappings.has(entityType)) {
            this.mappings.set(entityType, new Map());
        }
        const entityMappings = this.mappings.get(entityType);
        if (entityMappings) {
            entityMappings.set(seedId, realId);
        }

        // Auto-save after each mapping
        this.saveMappings();
    }

    /**
     * Gets the real ID for a given seed ID and entity type.
     * @param entityType - The type of entity
     * @param seedId - The seed ID to look up
     * @returns The real ID if found, undefined otherwise
     */
    getRealId(entityType: string, seedId: string): string | undefined {
        return this.mappings.get(entityType)?.get(seedId);
    }

    /**
     * Checks if a mapping exists for a given seed ID and entity type.
     * @param entityType - The type of entity
     * @param seedId - The seed ID to check
     * @returns True if mapping exists, false otherwise
     */
    hasMapping(entityType: string, seedId: string): boolean {
        return this.mappings.get(entityType)?.has(seedId) ?? false;
    }

    /**
     * Gets all real IDs for a list of seed IDs.
     * @param entityType - The type of entity
     * @param seedIds - Array of seed IDs to convert
     * @returns Array of real IDs, with undefined for missing mappings
     */
    getRealIds(entityType: string, seedIds: string[]): (string | undefined)[] {
        return seedIds.map((seedId) => this.getRealId(entityType, seedId));
    }

    /**
     * Gets all real IDs for a list of seed IDs, filtering out undefined values.
     * @param entityType - The type of entity
     * @param seedIds - Array of seed IDs to convert
     * @returns Array of real IDs (only valid mappings)
     */
    getValidRealIds(entityType: string, seedIds: string[]): string[] {
        return this.getRealIds(entityType, seedIds).filter((id): id is string => id !== undefined);
    }

    /**
     * Validates that all seed IDs have corresponding real IDs.
     * @param entityType - The type of entity
     * @param seedIds - Array of seed IDs to validate
     * @returns Object with validation result and missing IDs
     */
    validateMappings(
        entityType: string,
        seedIds: string[]
    ): {
        isValid: boolean;
        missingIds: string[];
        validIds: string[];
    } {
        const missingIds: string[] = [];
        const validIds: string[] = [];

        for (const seedId of seedIds) {
            const realId = this.getRealId(entityType, seedId);
            if (realId) {
                validIds.push(realId);
            } else {
                missingIds.push(seedId);
            }
        }

        return {
            isValid: missingIds.length === 0,
            missingIds,
            validIds
        };
    }

    /**
     * Get mapping statistics for a specific entity type
     */
    getMappingStats(entityType: string): { count: number; examples: string[] } {
        const mappings = this.mappings.get(entityType);
        if (!mappings) {
            return { count: 0, examples: [] };
        }

        const count = mappings.size;
        const examples = Array.from(mappings.entries())
            .slice(0, 3) // Show first 3 examples
            .map(([seedId, realId]) => `${seedId} â†’ ${realId.slice(0, 8)}...`);

        return { count, examples };
    }

    /**
     * Get comprehensive mapping statistics for all entity types
     */
    getAllMappingStats(): Record<string, { count: number; examples: string[] }> {
        const stats: Record<string, { count: number; examples: string[] }> = {};

        for (const [entityType] of this.mappings) {
            stats[entityType] = this.getMappingStats(entityType);
        }

        return stats;
    }

    /**
     * Print mapping statistics in a beautiful format
     */
    printMappingStats(entityType: string): void {
        const stats = this.getMappingStats(entityType);
        const { count, examples } = stats;

        if (count === 0) {
            logger.info(`${STATUS_ICONS.Info} ${entityType}: Sin mapeos`);
            return;
        }

        logger.info(`${STATUS_ICONS.Info} ${entityType}: ${count} IDs mapeados`);

        if (examples.length > 0) {
            const examplesText = examples.join(', ');
            logger.info(`   Ejemplos: ${examplesText}`);
        }
    }

    /**
     * Print all mapping statistics in a beautiful format
     */
    printAllMappingStats(): void {
        const allStats = this.getAllMappingStats();
        const totalMappings = Object.values(allStats).reduce((sum, stat) => sum + stat.count, 0);

        if (totalMappings === 0) {
            logger.info(`   ${STATUS_ICONS.Info} Sin mapeos de IDs`);
            return;
        }

        logger.info(`${STATUS_ICONS.Info} Total de mapeos: ${totalMappings} IDs`);

        for (const [entityType, stats] of Object.entries(allStats)) {
            if (stats.count > 0) {
                logger.info(`   ${entityType}: ${stats.count} IDs`);
            }
        }
    }

    /**
     * Clears all mappings for a specific entity type.
     * @param entityType - The type of entity to clear
     */
    clearEntityType(entityType: string): void {
        this.mappings.delete(entityType);
    }

    /**
     * Clears all mappings for all entity types.
     */
    clearAll(): void {
        this.mappings.clear();
        this.saveMappings();
    }

    // ============================================================================
    // SPECIFIC GETTERS FOR COMMON ENTITY TYPES
    // ============================================================================

    /**
     * Gets the real user ID for a given seed user ID
     * @param seedUserId - The seed user ID from JSON
     * @returns The real user ID if found, undefined otherwise
     */
    getMappedUserId(seedUserId: string): string | undefined {
        return this.getRealId('users', seedUserId);
    }

    /**
     * Gets the real destination ID for a given seed destination ID
     * @param seedDestinationId - The seed destination ID from JSON
     * @returns The real destination ID if found, undefined otherwise
     */
    getMappedDestinationId(seedDestinationId: string): string | undefined {
        return this.getRealId('destinations', seedDestinationId);
    }

    /**
     * Gets the real accommodation ID for a given seed accommodation ID
     * @param seedAccommodationId - The seed accommodation ID from JSON
     * @returns The real accommodation ID if found, undefined otherwise
     */
    getMappedAccommodationId(seedAccommodationId: string): string | undefined {
        return this.getRealId('accommodations', seedAccommodationId);
    }

    /**
     * Gets the real attraction ID for a given seed attraction ID
     * @param seedAttractionId - The seed attraction ID from JSON
     * @returns The real attraction ID if found, undefined otherwise
     */
    getMappedAttractionId(seedAttractionId: string): string | undefined {
        return this.getRealId('attractions', seedAttractionId);
    }

    /**
     * Gets the real post ID for a given seed post ID
     * @param seedPostId - The seed post ID from JSON
     * @returns The real post ID if found, undefined otherwise
     */
    getMappedPostId(seedPostId: string): string | undefined {
        return this.getRealId('posts', seedPostId);
    }

    /**
     * Gets the real event ID for a given seed event ID
     * @param seedEventId - The seed event ID from JSON
     * @returns The real event ID if found, undefined otherwise
     */
    getMappedEventId(seedEventId: string): string | undefined {
        return this.getRealId('events', seedEventId);
    }

    /**
     * Gets the real tag ID for a given seed tag ID
     * @param seedTagId - The seed tag ID from JSON
     * @returns The real tag ID if found, undefined otherwise
     */
    getMappedTagId(seedTagId: string): string | undefined {
        return this.getRealId('tags', seedTagId);
    }

    /**
     * Gets the real amenity ID for a given seed amenity ID
     * @param seedAmenityId - The seed amenity ID from JSON
     * @returns The real amenity ID if found, undefined otherwise
     */
    getMappedAmenityId(seedAmenityId: string): string | undefined {
        return this.getRealId('amenities', seedAmenityId);
    }

    /**
     * Gets the real feature ID for a given seed feature ID
     * @param seedFeatureId - The seed feature ID from JSON
     * @returns The real feature ID if found, undefined otherwise
     */
    getMappedFeatureId(seedFeatureId: string): string | undefined {
        return this.getRealId('features', seedFeatureId);
    }

    /**
     * Gets the real sponsor ID for a given seed sponsor ID
     * @param seedSponsorId - The seed sponsor ID from JSON
     * @returns The real sponsor ID if found, undefined otherwise
     */
    getMappedSponsorId(seedSponsorId: string): string | undefined {
        return this.getRealId('postsponsors', seedSponsorId);
    }

    /**
     * Gets the real organizer ID for a given seed organizer ID
     * @param seedOrganizerId - The seed organizer ID from JSON
     * @returns The real organizer ID if found, undefined otherwise
     */
    getMappedEventOrganizerId(seedOrganizerId: string): string | undefined {
        return this.getRealId('eventorganizers', seedOrganizerId);
    }

    /**
     * Gets the real location ID for a given seed location ID
     * @param seedLocationId - The seed location ID from JSON
     * @returns The real location ID if found, undefined otherwise
     */
    getMappedEventLocationId(seedLocationId: string): string | undefined {
        return this.getRealId('eventlocations', seedLocationId);
    }

    /**
     * Manually saves all current mappings to the file
     * Useful for explicit saves when auto-save is disabled
     */
    saveMappingsToFile(): void {
        this.saveMappings();
        logger.info(`${STATUS_ICONS.Info} Mappings saved to ${this.mappingsFilePath}`);
    }

    /**
     * Gets the path where mappings are stored
     * @returns The file path where mappings are saved
     */
    getMappingsFilePath(): string {
        return this.mappingsFilePath;
    }
}
