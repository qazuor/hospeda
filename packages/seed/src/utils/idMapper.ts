/**
 * Utility class for mapping seed IDs to real database IDs.
 * This is essential for handling relationships between entities during seeding.
 */
export class IdMapper {
    private mappings = new Map<string, Map<string, string>>();

    /**
     * Sets a mapping from seed ID to real ID for a specific entity type.
     * @param entityType - The type of entity (e.g., 'attractions', 'destinations', 'tags')
     * @param seedId - The ID from the seed JSON file
     * @param realId - The real UUID generated by the database
     */
    setMapping(entityType: string, seedId: string, realId: string): void {
        if (!this.mappings.has(entityType)) {
            this.mappings.set(entityType, new Map());
        }
        const entityMappings = this.mappings.get(entityType);
        if (entityMappings) {
            entityMappings.set(seedId, realId);
        }
    }

    /**
     * Gets the real ID for a given seed ID and entity type.
     * @param entityType - The type of entity
     * @param seedId - The seed ID to look up
     * @returns The real ID if found, undefined otherwise
     */
    getRealId(entityType: string, seedId: string): string | undefined {
        return this.mappings.get(entityType)?.get(seedId);
    }

    /**
     * Checks if a mapping exists for a given seed ID and entity type.
     * @param entityType - The type of entity
     * @param seedId - The seed ID to check
     * @returns True if mapping exists, false otherwise
     */
    hasMapping(entityType: string, seedId: string): boolean {
        return this.mappings.get(entityType)?.has(seedId) ?? false;
    }

    /**
     * Gets all real IDs for a list of seed IDs.
     * @param entityType - The type of entity
     * @param seedIds - Array of seed IDs to convert
     * @returns Array of real IDs, with undefined for missing mappings
     */
    getRealIds(entityType: string, seedIds: string[]): (string | undefined)[] {
        return seedIds.map((seedId) => this.getRealId(entityType, seedId));
    }

    /**
     * Gets all real IDs for a list of seed IDs, filtering out undefined values.
     * @param entityType - The type of entity
     * @param seedIds - Array of seed IDs to convert
     * @returns Array of real IDs (only valid mappings)
     */
    getValidRealIds(entityType: string, seedIds: string[]): string[] {
        return this.getRealIds(entityType, seedIds).filter((id): id is string => id !== undefined);
    }

    /**
     * Validates that all seed IDs have corresponding real IDs.
     * @param entityType - The type of entity
     * @param seedIds - Array of seed IDs to validate
     * @returns Object with validation result and missing IDs
     */
    validateMappings(
        entityType: string,
        seedIds: string[]
    ): {
        isValid: boolean;
        missingIds: string[];
        validIds: string[];
    } {
        const missingIds: string[] = [];
        const validIds: string[] = [];

        for (const seedId of seedIds) {
            const realId = this.getRealId(entityType, seedId);
            if (realId) {
                validIds.push(realId);
            } else {
                missingIds.push(seedId);
            }
        }

        return {
            isValid: missingIds.length === 0,
            missingIds,
            validIds
        };
    }

    /**
     * Gets statistics about the mappings for a specific entity type.
     * @param entityType - The type of entity
     * @returns Object with mapping statistics
     */
    getMappingStats(entityType: string): {
        totalMappings: number;
        entityType: string;
    } {
        const entityMappings = this.mappings.get(entityType);
        return {
            totalMappings: entityMappings?.size ?? 0,
            entityType
        };
    }

    /**
     * Gets all mapping statistics for all entity types.
     * @returns Object with statistics for all entity types
     */
    getAllMappingStats(): Record<string, number> {
        const stats: Record<string, number> = {};
        for (const [entityType, mappings] of this.mappings.entries()) {
            stats[entityType] = mappings.size;
        }
        return stats;
    }

    /**
     * Clears all mappings for a specific entity type.
     * @param entityType - The type of entity to clear
     */
    clearEntityType(entityType: string): void {
        this.mappings.delete(entityType);
    }

    /**
     * Clears all mappings for all entity types.
     */
    clearAll(): void {
        this.mappings.clear();
    }
}
