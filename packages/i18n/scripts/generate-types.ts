#!/usr/bin/env tsx

/**
 * Script to generate TypeScript types from translation JSON files
 *
 * This script reads all translation files and generates a union type
 * of all possible translation keys for type safety.
 */

import { readFileSync, readdirSync, writeFileSync } from 'node:fs';
import { join, resolve } from 'node:path';

const LOCALES_DIR = resolve(import.meta.dirname, '../src/locales');
const OUTPUT_FILE = resolve(import.meta.dirname, '../src/types.ts');

/**
 * Recursively extracts all keys from a nested object
 * @param obj - The object to extract keys from
 * @param prefix - The prefix for nested keys
 * @returns Array of dot-notation keys
 */
function extractKeys(obj: Record<string, unknown>, prefix = ''): string[] {
    const keys: string[] = [];

    for (const key in obj) {
        const fullKey = prefix ? `${prefix}.${key}` : key;

        if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
            keys.push(...extractKeys(obj[key] as Record<string, unknown>, fullKey));
        } else {
            keys.push(fullKey);
        }
    }

    return keys;
}

/**
 * Main function to generate types
 */
function generateTypes(): void {
    // biome-ignore lint/suspicious/noConsoleLog: <explanation>
    console.log('üîÑ Generating translation types...');

    const allKeys = new Set<string>();

    try {
        // Read all locale directories
        const locales = readdirSync(LOCALES_DIR, { withFileTypes: true })
            .filter((dirent) => dirent.isDirectory())
            .map((dirent) => dirent.name);

        // biome-ignore lint/suspicious/noConsoleLog: <explanation>
        console.log(`üìÅ Found locales: ${locales.join(', ')}`);

        // Process each locale
        for (const locale of locales) {
            const localeDir = join(LOCALES_DIR, locale);
            const files = readdirSync(localeDir).filter((file) => file.endsWith('.json'));

            // biome-ignore lint/suspicious/noConsoleLog: <explanation>
            console.log(`üìÑ Processing ${files.length} files for locale '${locale}'`);

            // Process each translation file
            for (const file of files) {
                const filePath = join(localeDir, file);
                const namespace = file.replace('.json', '');

                try {
                    const content = readFileSync(filePath, 'utf-8');
                    const translations = JSON.parse(content);

                    // Extract keys and add namespace prefix
                    const keys = extractKeys(translations);
                    for (const key of keys) {
                        allKeys.add(`${namespace}.${key}`);
                    }
                } catch (error) {
                    console.error(`‚ùå Error processing file ${filePath}:`, error);
                }
            }
        }

        // Generate TypeScript type definition
        const sortedKeys = Array.from(allKeys).sort();
        const typeDefinition = `/**
 * Auto-generated translation keys
 * 
 * This file is automatically generated from translation JSON files.
 * Do not edit manually - run 'pnpm generate-types' to regenerate.
 * 
 * Generated on: ${new Date().toISOString()}
 * Total keys: ${sortedKeys.length}
 */

export type TranslationKey =
${sortedKeys.map((key) => `    | '${key}'`).join('\n')};

/**
 * @deprecated Use TranslationKey instead
 */
export type TranslationKeys = TranslationKey;
`;

        // Write the generated types
        writeFileSync(OUTPUT_FILE, typeDefinition, 'utf-8');

        // biome-ignore lint/suspicious/noConsoleLog: <explanation>
        console.log(`‚úÖ Generated ${sortedKeys.length} translation keys`);
        // biome-ignore lint/suspicious/noConsoleLog: <explanation>
        console.log(`üìù Types written to: ${OUTPUT_FILE}`);
    } catch (error) {
        console.error('‚ùå Error generating types:', error);
        process.exit(1);
    }
}

// Run the script
generateTypes();
