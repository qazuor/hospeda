{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://hospeda.dev/schemas/tech-analysis.schema.json",
  "title": "Technical Analysis",
  "description": "JSON Schema for validating Technical Analysis documents",
  "type": "object",
  "required": ["metadata", "architecture", "implementation", "taskBreakdown"],
  "properties": {
    "metadata": {
      "type": "object",
      "required": ["planningCode", "relatedPDR", "version", "createdAt"],
      "properties": {
        "planningCode": {
          "type": "string",
          "pattern": "^P(F|R)?\\d{3,4}$"
        },
        "relatedPDR": {
          "type": "string",
          "description": "Reference to related PDR document"
        },
        "version": {
          "type": "string",
          "pattern": "^\\d+\\.\\d+(\\.\\d+)?$"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "type": "string"
        }
      }
    },
    "architecture": {
      "type": "object",
      "required": ["overview", "components"],
      "properties": {
        "overview": {
          "type": "string",
          "minLength": 50,
          "description": "High-level architecture overview"
        },
        "components": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "required": ["name", "type", "description"],
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": ["frontend", "backend", "database", "api", "service", "package", "infrastructure"]
              },
              "description": {
                "type": "string"
              },
              "technologies": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "dependencies": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "dataFlow": {
          "type": "string",
          "description": "Description of data flow through the system"
        },
        "diagrams": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["name", "path"],
            "properties": {
              "name": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": ["architecture", "sequence", "class", "entity-relationship", "flowchart"]
              }
            }
          }
        }
      }
    },
    "implementation": {
      "type": "object",
      "required": ["strategy", "phases"],
      "properties": {
        "strategy": {
          "type": "string",
          "minLength": 30,
          "description": "Implementation strategy and approach"
        },
        "phases": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "required": ["id", "name", "description", "estimatedHours"],
            "properties": {
              "id": {
                "type": "integer",
                "minimum": 1
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "estimatedHours": {
                "type": "number",
                "minimum": 0.5
              },
              "dependencies": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "IDs of phases that must complete first"
              }
            }
          }
        },
        "techStack": {
          "type": "object",
          "properties": {
            "languages": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "frameworks": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "libraries": {
              "type": "array",
              "items": {
                "type": "object",
                "required": ["name", "version"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  },
                  "purpose": {
                    "type": "string"
                  }
                }
              }
            },
            "tools": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "patterns": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["name", "rationale"],
            "properties": {
              "name": {
                "type": "string"
              },
              "rationale": {
                "type": "string"
              },
              "examples": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "taskBreakdown": {
      "type": "object",
      "required": ["totalTasks", "totalHours", "tasks"],
      "properties": {
        "totalTasks": {
          "type": "integer",
          "minimum": 1
        },
        "totalHours": {
          "type": "number",
          "minimum": 0.5
        },
        "tasks": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "required": ["code", "title", "estimatedHours", "priority"],
            "properties": {
              "code": {
                "type": "string",
                "pattern": "^PF\\d{3,4}(-\\d+)?(\\.\\d+)?$"
              },
              "title": {
                "type": "string",
                "minLength": 5
              },
              "description": {
                "type": "string"
              },
              "estimatedHours": {
                "type": "number",
                "minimum": 0.5,
                "maximum": 4,
                "description": "Tasks should be 0.5-4 hours (atomized)"
              },
              "priority": {
                "type": "string",
                "enum": ["P0", "P1", "P2", "P3"]
              },
              "dependencies": {
                "type": "array",
                "items": {
                  "type": "string",
                  "pattern": "^PF\\d{3,4}(-\\d+)?(\\.\\d+)?$"
                }
              },
              "phase": {
                "type": "integer",
                "minimum": 1
              },
              "canParallelize": {
                "type": "boolean",
                "description": "Can be done in parallel with other tasks"
              }
            }
          }
        }
      }
    },
    "risks": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["risk", "impact", "probability", "mitigation"],
        "properties": {
          "risk": {
            "type": "string"
          },
          "impact": {
            "type": "string",
            "enum": ["high", "medium", "low"]
          },
          "probability": {
            "type": "string",
            "enum": ["high", "medium", "low"]
          },
          "mitigation": {
            "type": "string"
          },
          "contingency": {
            "type": "string"
          }
        }
      }
    },
    "testing": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string"
        },
        "coverage": {
          "type": "object",
          "properties": {
            "target": {
              "type": "number",
              "minimum": 0,
              "maximum": 100
            },
            "minimum": {
              "type": "number",
              "minimum": 0,
              "maximum": 100
            }
          }
        },
        "types": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["unit", "integration", "e2e", "performance", "security"]
          }
        }
      }
    },
    "deployment": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string",
          "enum": ["blue-green", "rolling", "canary", "recreate"]
        },
        "environments": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["development", "staging", "production"]
          }
        },
        "cicd": {
          "type": "object",
          "properties": {
            "platform": {
              "type": "string"
            },
            "steps": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "performance": {
      "type": "object",
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["metric", "target"],
            "properties": {
              "metric": {
                "type": "string"
              },
              "target": {
                "type": "string"
              },
              "measurement": {
                "type": "string"
              }
            }
          }
        },
        "optimizations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "security": {
      "type": "object",
      "properties": {
        "considerations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "authentication": {
          "type": "string"
        },
        "authorization": {
          "type": "string"
        },
        "dataProtection": {
          "type": "string"
        }
      }
    }
  }
}
