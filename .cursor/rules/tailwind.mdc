---
description: 
globs: *.css,*.html,*.tsx,*.astro
alwaysApply: false
---
- Use Tailwind utility classes extensively in your templates
- Leverage Tailwind's responsive design utilities
- Utilize Tailwind's color palette and spacing scale
- Implement custom theme extensions when necessary
- Never use @apply directive in production
- Always use light and dark theming
- Implement accessibility best practices.


## 🎨 Tailwind / CSS Rules

These rules apply to all code using Tailwind CSS (HTML, JSX, Astro, etc):

---

### 🧼 Class Order & Organization

- Always follow Tailwind's official class order:
  https://tailwindcss.com/docs/installation#editor-setup
- Use Biome formatter with Tailwind plugin to auto-sort.
- Avoid redundant or duplicated utility classes.
- Keep class strings clean and readable — split into logical groups (layout, spacing, borders, text, effects).

```tsx
// ✅ Good
className="flex flex-col items-center gap-4 p-6 bg-white border border-gray-200 rounded-lg shadow-sm"

// ❌ Bad
className="p-6 border flex flex-col rounded-lg bg-white items-center gap-4 shadow-sm border-gray-200"
```

---

### ✨ Styling Best Practices

- Avoid using `!important`.
- Don’t use inline logic inside className. Prefer extracted variables:

```tsx
// ✅ Good
const buttonClass = isActive ? 'bg-blue-600' : 'bg-gray-300';

// ❌ Bad
className={`p-4 ${isActive ? 'bg-blue-600' : 'bg-gray-300'}`}
```

- Use `@apply` in CSS files (under `@layer`) if a utility set is reused across files.
- Prefer consistency across themes: use `dark:` variants as needed.

---

### 🧑‍🦯 Accessibility

- All interactive elements must include:
  - `tabIndex={0}`
  - `aria-label` when not visually labeled
  - Keyboard interaction (`onKeyDown`)
- Never use `outline-none` without compensating with `ring-*` classes.

---

### 🌘 Dark Mode

- Use Tailwind’s `dark:` variant for theming.
- Avoid custom dark mode logic unless absolutely necessary.
- Example:

```tsx
className="bg-white text-gray-900 dark:bg-gray-900 dark:text-gray-100"
```

---

### 📐 Responsive & Utilities

- Use responsive prefixes (`sm:`, `md:`, `lg:`) thoughtfully and sparingly.
- Use `max-w-*`, `gap-*`, and `space-*` for layout instead of margin hacks.
- Prefer Tailwind's built-in utilities over writing custom CSS whenever possible.

---

### 🎯 Consistency

- Maintain uniform spacing, typography, and sizing across components.
- Align visual rhythm using consistent paddings/margins like `p-4`, `gap-4`, `mb-6`, etc.
- Avoid arbitrary values unless justified.

---

### 🧪 Visual Testing

- Always check:
  - Hover, focus, active, and disabled states
  - Light and dark themes
  - Mobile and desktop responsiveness

---

### ✅ TL;DR

- Keep class order clean and consistent.
- Use Tailwind for all layout/styling needs.
- Extract complex styles with `@apply`.
- Ensure accessibility and dark mode support.
- Avoid inline logic and messy conditionals in className.
