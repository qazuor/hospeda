---
description: 
globs: *.schema.ts
alwaysApply: false
---
## üß© Cursor Rules ‚Äî Zod Schemas (`*.schema.ts` files)

These rules apply to all files that define Zod schemas, including:

- Validation for forms
- API inputs/outputs
- DB seeds
- DTOs and data transformers
- Content collections (Astro)

---

### üì¶ File Location & Structure

- All schemas must live in the `@repo/schemas` package.
- One schema file per domain entity (`user.schema.ts`, `accommodation.schema.ts`, etc.).
- Use an `index.ts` to re-export them for cleaner imports.

---

### üß† Typing & Structure

- Always define and export:
  - `const schema = z.object(...)`
  - `export type X = z.infer<typeof schema>`
- Schema must match **exactly** the corresponding type in `@repo/types`.
- Never omit or rename fields arbitrarily.

```ts
export const userSchema = z.object({
  id: z.string().uuid(),
  email: z.string().email({ message: 'Invalid email address' }),
  isActive: z.boolean().default(true),
});

export type UserSchema = z.infer<typeof userSchema>;
```

---

### üéØ Naming Conventions

- Schema variable: `entitySchema`, `entityInputSchema`, `entityPartialSchema`, etc.
- Inferred type: `EntitySchema`, `EntityInput`, `EntityPartial`, etc.
- Use PascalCase for types and camelCase for schema variables.
---

### üß™ Validation & Messages

- All fields must include a **custom error message** when user-facing.
- Use `.refine()` or `.superRefine()` for conditional logic.
- Use `.transform()` only when needed ‚Äî avoid side effects.
- Use `.default()` for optional fields that need fallbacks.

```ts
/**
 * Accommodation Amenity schema definition using Zod for validation.
 * Represents an amenity associated with an accommodation, including cost and optionality.
 */
export const AccommodationAmenitySchema = WithModerationStatusSchema.merge(WithAdminInfoSchema).extend(
    {
        /** Accommodation ID this amenity belongs to */
        accommodationId: z.string({
            message: 'zodError.accommodation.amenity.accommodationId.required',
            invalid_type_error: 'zodError.accommodation.amenity.accommodationId.invalidType'
        }),
        /** Amenity ID */
        amenityId: z.string({
            message: 'zodError.accommodation.amenity.amenityId.required',
            invalid_type_error: 'zodError.accommodation.amenity.amenityId.invalidType'
        }),
        /** Whether the amenity is optional for the guest */
        isOptional: z.boolean({
            message: 'zodError.accommodation.amenity.isOptional.required',
            invalid_type_error: 'zodError.accommodation.amenity.isOptional.invalidType'
        }),
        /** Additional cost for this amenity, optional */
        additionalCost: PriceSchema.optional(),
        /** Additional cost as a percent, optional (0-100) */
        additionalCostPercent: z
            .number({
                message: 'zodError.accommodation.amenity.additionalCostPercent.required',
                invalid_type_error:
                    'zodError.accommodation.amenity.additionalCostPercent.invalidType'
            })
            .min(0, { message: 'zodError.accommodation.amenity.additionalCostPercent.min' })
            .max(100, { message: 'zodError.accommodation.amenity.additionalCostPercent.max' })
            .optional(),
        /** Amenity object, optional */
        amenity: AmenitySchema.optional()
    }
);
```

---

### ‚ôªÔ∏è Reusability

- Extract common patterns to shared schemas:
  - `z.string().uuid()` ‚Üí `uuidSchema`
  - `z.string().min(1)` ‚Üí `nonEmptyString`
- Place shared fragments in `common/` (e.g., `zod.helpers.ts` or `common.schemas.ts`).
- Reuse base schemas with `.extend()` when needed.

```ts
export const baseSeoSchema = z.object({
  title: z.string().min(1),
  description: z.string().min(10),
});
```

---

### üîÑ Matching With Types

- Use **zod schemas to validate**, not to replace your types.
- Types must always be defined in `@repo/types`, and schemas must reflect those exactly.
- Do not change enum names or keys in schemas.

---

### üß© Partial, Optional, Input, Output

- Use `z.partial()` or `.optional()` for update schemas.
- Export multiple versions when needed:

```ts
export const userInputSchema = userSchema.omit({ id: true });
export const userUpdateSchema = userInputSchema.partial();
```

- If there‚Äôs a DTO used in forms, export `FormInputSchema`, `FormFieldSchema`, etc.

---

### ‚ö†Ô∏è Forbidden in Zod

- ‚ùå Using `z.any()` unless strictly necessary.
- ‚ùå Using string regexes without `.email()`, `.uuid()`, etc. when available.
- ‚ùå Duplicating schemas ‚Äî prefer `.extend()`, `.pick()`, `.omit()`, etc.
- ‚ùå Defining types directly from Zod objects that don‚Äôt match `@repo/types`.

---

### ‚úÖ TL;DR

- Match `@repo/types` exactly.
- Always export schema + inferred type.
- Include custom error messages.
- Reuse shared schema fragments.
- Use `.extend()` and `.omit()` to avoid duplication.
- Use `z.infer<typeof schema>` for type safety everywhere.
