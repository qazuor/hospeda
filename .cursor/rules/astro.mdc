---
description: 
globs: *.astro
alwaysApply: false
---
# Astro Rules

- Use `.astro` components for layouts and pages.
- Pass data via props, not global variables.
- Keep business logic outside `.astro` files; use scripts or utilities.
- Prefer partial hydration and islands architecture for interactivity.
- Organize components and assets in dedicated folders.
- Generate responsive designs.
- Implement accessibility best practices.
- Use semantic HTML elements and correct ARIA roles/attributes.


### üß† General Principles

- Astro files must be:
  - Readable
  - Accessible
  - Consistent with the Tailwind design system
  - Optimized for SEO and performance
- Always follow the design system and layout structure already defined (`MainLayout`, `PageContainer`, etc.).
- Assume the file is part of a **monorepo**: use imports from shared packages (`@repo/types`, `@repo/schemas`, `@repo/config`, etc.) when relevant.

---

### üì¶ File Structure

- Top of file:
  1. `---` script block with typed props
  2. `import` statements
  3. Component logic (if any)
- Then markup, using Astro/JSX syntax

```astro
---
import { HeroSection } from '@/components/hero/HeroSection.astro';
import type { DestinationType } from '@repo/types';
const { destinations } = Astro.props as { destinations: DestinationType[] };
---
```

---

### üé® Tailwind Usage

- Use only Tailwind CSS classes for styling.
- Class names must be **ordered** and **grouped by category** (layout ‚Üí spacing ‚Üí border ‚Üí text ‚Üí effects).
- Do not use inline `style=""` unless strictly necessary.
- Do not use external CSS files except for global resets or typography layer.

---

### üí° HTML + JSX Guidelines

- All components must be accessible:
  - Use `aria-*`, `tabIndex`, `role`, and keyboard event handlers where relevant.
  - Use semantic HTML tags (no `div` soup).
- Use Astro‚Äôs `set:html` sparingly, and only with sanitized content.
- Hydrate React components using `client:*` directives:
  - `client:load`, `client:visible`, `client:idle`, `client:only`
- Keep React hydration minimal and scoped to true interactivity.

---

### üåç SEO & Performance

- Every page must include:
  - `<title>` and `<meta name="description">`
  - Open Graph tags (if applicable)
  - `lang="es"` on root `<html>`
- Use `<Image>` or `<img loading="lazy">` for media.
- Avoid client-side hydration unless necessary.
- Use `getStaticPaths` and `getStaticProps` for prerendered pages.
- Use `fetch()` only in the server script block (not inside markup).

---

### üß© Component Composition

- Compose layout using:
  - `Layout.astro`
  - `PageContainer.astro`
  - `SectionWrapper.astro`
- Reuse shared components from `/components/common`, `/components/ui`, `/components/layout`, etc.
- Do not inline large markup if it can be a reusable component.

---

### üìÑ Props & Typing

- Always type `Astro.props` using imported types.
- Use destructuring with explicit typing:

```ts
const { accommodation } = Astro.props as { accommodation: AccommodationType };
```

- If component accepts props, document them using TypeScript + JSDoc.

---

### ‚ö†Ô∏è Forbidden in `.astro` Files

- ‚ùå Using `style=""` inline
- ‚ùå Writing CSS in the markup (unless in `@layer` inside a global CSS)
- ‚ùå Hydrating React when unnecessary
- ‚ùå Unstructured layout (div-based blocks without meaning)
- ‚ùå Using IDs for styling purposes

---

### ‚úÖ TL;DR

- Use `Tailwind` for all styles ‚Äî no CSS-in-markup.
- Hydrate React only when necessary.
- Always type your `Astro.props`.
- Use semantic tags and accessible markup.
- Optimize for SEO and lazy load images.
