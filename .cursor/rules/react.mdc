---
description: 
globs: *.jsx,*.tsx
alwaysApply: false
---
# React Rules

- Use functional components and React hooks exclusively.
- Keep components small, focused, and reusable.
- Use strict TypeScript typing for all props and state.
- Prefer composition over inheritance.
- Extract logic into custom hooks when possible.
- Avoid side effects in render logic.
- Provide default props for React Components.
- Generate responsive designs.
- Implement accessibility best practices.
- Use semantic HTML elements and correct ARIA roles/attributes.



### 🧠 Component Design

- Components must be:
  - Small and focused
  - Typed with `FC<Props>` or inline `({ ... }: Props) =>`
  - Written as function components (never class components)
- If state or side-effects are needed, use `useState`, `useEffect`, `useRef`, `useMemo`, etc.
- Use hooks from TanStack, Zustand, or custom — never use `useEffect` for logic that can live in a store or loader.

---

### 💅 Styling & Tailwind

- Use Tailwind classes for **all styling** — no CSS modules or inline styles.
- Tailwind classes must be **ordered** and **grouped** by type (layout → spacing → text → borders → effects).
- Use `clsx` or `cn()` util to manage conditional classes cleanly.
- Do not hardcode classNames inline with conditionals.

```tsx
const buttonClass = cn(
  'px-4 py-2 rounded-md font-semibold transition',
  isActive ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'
);
```

---

### 🔠 Props & Typing

- Always define a `Props` type or interface.
- If the component is internal/private, use `type Props = {}`.
- Props should be descriptive, not cryptic (`title`, not `t`, `onSubmit`, not `cb`).
- Use readonly or optional props where applicable.

```tsx
type Props = {
  title: string;
  onClick?: () => void;
};
```

---

### ♿ Accessibility

- Every interactive element must have:
  - `tabIndex={0}`
  - `aria-label` or `aria-*` attributes
  - `onKeyDown` handler if clickable
- Prefer `<button>` over `div` for clickables.
- Avoid `outline-none` without `focus-visible:ring-*`.

---

### 🧩 Composition

- Components must be:
  - Composable (support `children` when logical)
  - Pure (no side effects in body)
  - DRY (avoid code duplication)
- Extract logic-heavy blocks into custom hooks or utilities.

---

### 🧪 Testing (if applicable)

- All public components must have:
  - Unit tests (snapshot or logic)
  - Interaction tests for modals/forms
- Use Testing Library + Vitest/JSDOM for behavior testing

---

### 🌍 Client Directives (Astro islands)

- Use `client:only`, `client:load`, or `client:idle` as needed.
- Hydrate only what requires interactivity.
- Don’t overuse islands — prefer server-rendered Astro when possible.

---

### ⚠️ Forbidden Patterns

- ❌ `any` or untyped props
- ❌ Inline `style={{ ... }}` unless dynamic and unavoidable
- ❌ `export default` — use named exports
- ❌ Unscoped state in parent components (use `useForm`, `useStore`, etc.)
- ❌ Writing logic inside JSX (`{items.map(...)}` with conditionals inside — extract first)

---

### ✅ TL;DR

- Use typed function components.
- Style with Tailwind only, ordered and grouped.
- Use semantic HTML and a11y attributes.
- Split logic into hooks or utils.
- Never use `any`, `default export`, or untyped props.
- Use islands only for true interactivity.
